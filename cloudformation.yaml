AWSTemplateFormatVersion: 2010-09-09
Description: Deployment for the M5Stack Evaluation

Parameters:
  DynamoTableName:
    Description:                        "Name of the DynamoDB table"
    Type:                               "String"
    Default:                            "environment"

Resources: 
  TimeStreamDB:
    Type: AWS::Timestream::Database
    Properties:
      DatabaseName: "data_streams_db"

  TimestreamEnvironmentTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: "data_streams_db" # Required
      RetentionProperties: 
        MemoryStoreRetentionPeriodInHours: 1
        MagneticStoreRetentionPeriodInDays: 1
      TableName: "environment"
    DependsOn:
      - TimeStreamDB

  TimestreamRGBReadingsTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: "data_streams_db" # Required
      RetentionProperties: 
        MemoryStoreRetentionPeriodInHours: 1
        MagneticStoreRetentionPeriodInDays: 1
      TableName: "m5_core_rgb_readings"
    DependsOn:
      - TimeStreamDB

  TimestreamDeviceStatusTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: "data_streams_db" # Required
      RetentionProperties: 
        MemoryStoreRetentionPeriodInHours: 1
        MagneticStoreRetentionPeriodInDays: 1
      TableName: "device_status"
    DependsOn:
      - TimeStreamDB
  TimestreamFanControlTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: "data_streams_db" # Required
      RetentionProperties: 
        MemoryStoreRetentionPeriodInHours: 1
        MagneticStoreRetentionPeriodInDays: 1
      TableName: "m5_env_fan_control"
    DependsOn:
      - TimeStreamDB

  EnvironmentTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "env_to_timestream"
      TopicRulePayload:
        RuleDisabled: false
        Actions:
          - Timestream:
              RoleArn: !GetAtt IOTDataRole.Arn
              DatabaseName: !Ref TimeStreamDB
              TableName: !Select [1, !Split [ "|", !Ref TimestreamEnvironmentTable ] ]
              Dimensions:
                - Name: device_id
                  Value: ${topic(2)}
              Timestamp:
                Unit: MILLISECONDS
                Value: ${timestamp()}  
        AwsIotSqlVersion: "2015-10-08"
        Description: "Environment Persistence Into Timestream"
        Sql: "SELECT cast(temperature as Double) as temperature, cast(humidity as Double) as humidity, fan, setpoint FROM 'things/+/env'"
    DependsOn:
      - IOTDataRole
      - TimeStreamDB
      - TimestreamEnvironmentTable

  RGBColorsTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "m5_rgb_readings"
      TopicRulePayload:
        RuleDisabled: false
        Actions:
          - Timestream:
              RoleArn: !GetAtt IOTDataRole.Arn
              DatabaseName: !Ref TimeStreamDB
              TableName: !Select [1, !Split [ "|", !Ref TimestreamRGBReadingsTable ] ]
              Dimensions:
                - Name: device_id
                  Value: ${device}
              Timestamp:
                Unit: MILLISECONDS
                Value: ${timestamp()}  
        AwsIotSqlVersion: "2016-03-23"
        Description: "M5 Core 2 RGB Readings to Timestream"
        Sql: "SELECT device, red, green, blue FROM '+/colors/#'"
    DependsOn:
      - IOTDataRole
      - TimeStreamDB
      - TimestreamRGBReadingsTable

  FanControlTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "mkr_1010_fan_control"
      TopicRulePayload:
        RuleDisabled: false
        Actions:
          - Timestream:
              RoleArn: !GetAtt IOTDataRole.Arn
              DatabaseName: !Ref TimeStreamDB
              TableName: !Select [1, !Split [ "|", !Ref TimestreamFanControlTable ] ]
              Dimensions:
                - Name: device_id
                  Value: ${device_id}
              Timestamp:
                Unit: MILLISECONDS
                Value: ${timestamp()}  
        AwsIotSqlVersion: "2016-03-23"
        Description: "MKR 1010 ENV Fan Control State"
        Sql: "SELECT fan FROM 'MKRWIFI_1010_ENV/data/states'"
    DependsOn:
      - IOTDataRole
      - TimeStreamDB
      - TimestreamFanControlTable

  MqttToDynamoRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "env_to_dynamo"
      TopicRulePayload:
        RuleDisabled: false
        Actions:
          - DynamoDBv2:
              RoleArn: !GetAtt IoTCoreExecutionRole.Arn
              PutItem:
                TableName: !Ref DynamoTableName
        AwsIotSqlVersion: "2016-03-23"
        Description: "Save Environment Readings to DynamoDB"
        Sql: "SELECT topic(2) as device, timestamp() as timestamp, * FROM 'things/+/env'"
    DependsOn:
      - DynamoTable
      - IoTCoreExecutionRole
      - DynamoWriterPolicy

  IOTDataRole:
    Type: AWS::IAM::Role
    Description: "IOT Role"
    Properties:
      # RoleName: "IOTDataRole"
      RoleName:
        !Sub 'role-${AWS::Region}-IOTDataRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AWSIoTDataAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: iot-data-timestream-rule-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: timestream:WriteRecords
                Resource: !GetAtt TimestreamEnvironmentTable.Arn
              - Effect: Allow
                Action: timestream:WriteRecords
                Resource: !GetAtt TimestreamRGBReadingsTable.Arn
              - Effect: Allow
                Action: timestream:WriteRecords
                Resource: !GetAtt TimestreamFanControlTable.Arn
              - Effect: Allow
                Action: timestream:DescribeEndpoints
                Resource: "*"

  IOTLambdaRole:
    Type: AWS::IAM::Role
    Description: "IOT Lambda Role"
    Properties:
      RoleName:
        !Sub 'role-${AWS::Region}-IOTLambdaRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'iot:publish'
                Resource: '*'       
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSIoTDataAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  IoTDeviceStatus:
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions: 
          - 
            AttributeName: "clientId"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "clientId"
            KeyType: "HASH"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: "iot_device_status"

  IOTDeviceConnectionStatusHandler:
    Type: AWS::Lambda::Function
    DependsOn:
      - IOTLambdaRole
    Properties:
      Runtime: python3.8
      Handler: 'index.lambda_handler'
      Role: !GetAtt IOTLambdaRole.Arn
      FunctionName: 'iot_device_connection_status_handler'
      Code:
        ZipFile: |

          import json
          from boto3.dynamodb.conditions import Key
          import boto3

          dynamoDb = boto3.resource('dynamodb')
          table = dynamoDb.Table('iot_device_status')

          def lambda_handler(event, context):
              # print(event) 
              clientId = event['clientId'] 
              eventTime = event['timestamp']
              eventType = event['eventType']
              
              if 'iotconsole' not in clientId:
                if 'ipAddress' in event:
                    ipAddress = event['ipAddress']
                else: 
                    ipAddress = ''

                pKey = {"clientId": clientId}
                connected = eventType == 'connected'
                response = table.get_item(Key=pKey)

                if 'Item' in response:
                    item = response['Item']
                    print(f"Updating status for device: {clientId}")
                    
                    table.update_item(
                        Key = pKey,
                        UpdateExpression='SET '
                                        'event_time = :eventTime, '
                                        'connected = :connected, '
                                        'ip_address = :ipAddress',
                        ExpressionAttributeValues={
                            ':eventTime': eventTime,
                            ':connected': connected,
                            ':ipAddress' : ipAddress
                        }
                    )

                else:
                    print(f"Adding status for device {clientId}")

                    record = {
                        'clientId' : clientId,
                        'event_time' : eventTime,
                        'connected' : connected,
                        'ip_address' : ipAddress
                    }

                    print("Inserting into Dynamo")
                    table.put_item(Item = record)

  DeviceConnectedTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "iot_device_status_connected"
      TopicRulePayload:
        RuleDisabled: true
        Actions:
          - Lambda:
                FunctionArn: !GetAtt IOTDeviceConnectionStatusHandler.Arn
        AwsIotSqlVersion: "2016-03-23"
        Description: "Device Status Connected"
        Sql: "SELECT *  FROM '$aws/events/presence/connected/#'"
    DependsOn:
      - IOTDataRole
      - IOTDeviceConnectionStatusHandler
      - TimeStreamDB
      - TimestreamDeviceStatusTable
  IOTDeviceStateConnectedHandlerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt IOTDeviceConnectionStatusHandler.Arn
        Action: lambda:InvokeFunction
        Principal: iot.amazonaws.com
        SourceAccount: !Ref AWS::AccountId      
        SourceArn: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":rule/", !Ref "DeviceConnectedTopicRule" ] ]
      DependsOn:
        - IOTDeviceConnectionStatusHandler
        - DeviceConnectedTopicRule

  DeviceDisconnectedTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "iot_device_status_disconnected"
      TopicRulePayload:
        RuleDisabled: true
        Actions:
          - Lambda:
                FunctionArn: !GetAtt IOTDeviceConnectionStatusHandler.Arn
        AwsIotSqlVersion: "2016-03-23"
        Description: "Device Status Disconnected"
        Sql: "SELECT * FROM '$aws/events/presence/disconnected/#'"
    DependsOn:
      - IOTDataRole
      - IOTDeviceConnectionStatusHandler
      - TimeStreamDB
      - TimestreamDeviceStatusTable
  IOTDeviceStateDisconnectedHandlerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt IOTDeviceConnectionStatusHandler.Arn
        Action: lambda:InvokeFunction
        Principal: iot.amazonaws.com
        SourceAccount: !Ref AWS::AccountId      
        SourceArn: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":rule/", !Ref "DeviceDisconnectedTopicRule" ] ]
      DependsOn:
        - IOTDeviceConnectionStatusHandler
        - DeviceDisconnectedTopicRule


  ##
  ## Dynamo
  ##

  DynamoTable:
    Type:                               "AWS::DynamoDB::Table"
    Properties:
      TableName:                        !Ref DynamoTableName
      AttributeDefinitions:
        -
          AttributeName:                "device"
          AttributeType:                "S"
        -
          AttributeName:                "timestamp"
          AttributeType:                "N"
      KeySchema:
        -
          AttributeName:                "device"
          KeyType:                      "HASH"
        -
          AttributeName:                "timestamp"
          KeyType:                      "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits:              10
        WriteCapacityUnits:             5

  DynamoWriterPolicy:
    Type:                               "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName:                !Sub "DynamoWriter-${DynamoTableName}"
      Description:                      "Allows writes to the example DynamoDB table"
      PolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          -
            Effect:                     "Allow"
            Action:
              -                         "dynamodb:PutItem"
            Resource:                   !GetAtt DynamoTable.Arn

  DynamoReaderPolicy:
    Type:                               "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName:                !Sub "DynamoReader-${DynamoTableName}"
      Description:                      "Allows reading the example DynamoDB table"
      PolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          -
            Effect:                     "Allow"
            Action:
                -                       "dynamodb:GetItem"
                -                       "dynamodb:Query"
                -                       "dynamodb:Scan"
            Resource:                   !GetAtt DynamoTable.Arn

  ##
  ## IoT Core Policies
  ##

  # Restrictive policy for devices
  ThingPolicy:
    Type: 'AWS::IoT::Policy'
    Properties:
      PolicyName: ThingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'iot:Connect'
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${!iot:Certificate.Subject.CommonName}'
          - Effect: Allow
            Action:
              - 'iot:Publish'
              - 'iot:Receive'
            Resource: 
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/things/${!iot:ClientId}/*'
          - Effect: Allow
            Action: 'iot:Subscribe'
            Resource: 
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/things/${!iot:ClientId}/*'

  # Wide open policy for debugging Things
  AllowAllPolicy:
    Type: 'AWS::IoT::Policy'
    Properties:
      PolicyName: AllowAllPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'iot:*'
            Resource:
              - '*'

  # TODO add Timescale here
  IoTCoreExecutionRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      RoleName:                         "iot-core-execution-role"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Action:                       "sts:AssumeRole"
          Principal:
            Service:                    "iot.amazonaws.com"
      ManagedPolicyArns:
        -                               !Ref DynamoWriterPolicy

# TODO create thingtypes
# TODO create glitch user
# TODO lock down glitch user permissions
# TODO sort out policy